# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v2.0. To use this config, the firmware should be compiled for the
# STM32F103 with a "28KiB bootloader" and USB communication. Also,
# select "Enable extra low-level configuration options" and configure
# "GPIO pins to set at micro-controller startup" to "!PA14".

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[bltouch]
stow_on_each_sample: True
probe_with_touch_mode: True
sensor_pin: ^PC14
control_pin: PA1
pin_move_time: 0.5
pin_up_touch_mode_reports_triggered: False
x_offset: -35
y_offset: -20
z_offset: 2.480
speed: 10
lift_speed: 20
samples: 3
sample_retract_dist: 5
samples_tolerance_retries: 3

[screws_tilt_adjust]
horizontal_move_z: 10
screw1: 55,55
screw1_name: Front Left
screw2: 224,55
screw2_name: Front Right
screw3: 224,224
screw3_name: Back Right
screw4: 55,224
screw4_name: Back Left

[force_move]
enable_force_move: True

[safe_z_home]
home_xy_position: 144,147
speed: 150
z_hop: 15
z_hop_speed: 20

[bed_mesh]
speed: 150
horizontal_move_z: 5
mesh_min: 9,16
mesh_max: 184,195
probe_count: 8,8
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

#-------------------------------------------------------------------------------------

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 39.82
endstop_pin: ^PC0
position_endstop: 225
position_max: 225
homing_speed: 40

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 39.82
endstop_pin: ^PC1
position_endstop: 225
position_max: 225
homing_speed: 40

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
# position_endstop: 0.0
position_min: -5
position_max: 295
homing_speed: 20

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

#------------------------------------------------------------------------

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD2
microsteps: 16
rotation_distance: 23
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp=27.110 
pid_Ki=1.807 
pid_Kd=101.661
min_temp: 0
max_temp: 270
max_extrude_only_distance: 100.0
#min_extrude_temp: 0
pressure_advance: 0.12

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 0

[firmware_retraction]
retract_length: 1.2
retract_speed: 20
unretract_extra_length: 0
unretract_speed: 10

[filament_motion_sensor btt_smartie]
detection_length: 7.0
extruder: extruder
switch_pin: !PC15
pause_on_runout: false
runout_gcode: FILAMENT_RUNOUT

#----------------------------------------------------------------------------

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC3
control: pid
pid_Kp=75.422 
pid_Ki=1.964 
pid_Kd=724.050
min_temp: 0
max_temp: 130

[heater_fan nozzle_cooling_fan]
pin: PC7

[fan]
pin: PC6

#------------------------------------------------------------------------------

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_33FFD6055356343530691143-if00

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100,100,20  # an example

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 70.2
shaper_type_y = zv
shaper_freq_y = 46.2

[printer]
kinematics: cartesian
max_velocity: 250
max_accel: 2500
max_z_velocity: 15
max_z_accel: 100

[static_digital_output usb_pullup_enable]
pins: !PA14

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8,  EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8

[output_pin beeper]
pin: EXP1_1

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]
recover_velocity: 50.0

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100


#-----------------------------------------------------------------------------------
[gcode_macro FILAMENT_RUNOUT]
gcode:
    #M300 S1 P10
    M600
    #M300 S1 P10

#[gcode_macro M300]
#gcode:
#    {% set S = params.S|default(1000)|int %}
#    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=BEEPER VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    G4 P{P}
#    SET_PIN PIN=BEEPER VALUE=0

[gcode_macro M600]
gcode:
    {% set X = params.X|default(25)|float %}
    {% set Y = params.Y|default(25)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-15 F1000
    RESTORE_GCODE_STATE NAME=M600_state

      
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="wifi_switch",
                             state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
    POWER_OFF_LIGHT
  {% endif %}

[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=120

[gcode_macro POWER_ON_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="wifi_switch",
                             state="on")}



[gcode_macro POWER_OFF_LIGHT]
gcode:
  {action_call_remote_method("set_device_power",
                             device="wifi_light",
                             state="off")}


[gcode_macro POWER_ON_LIGHT]
gcode:
  {action_call_remote_method("set_device_power",
                             device="wifi_light",
                             state="on")}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.000417, -0.015833, 0.010833, 0.035833, 0.011667, 0.016667, -0.010417, 0.012083
#*# 	  -0.023750, -0.028333, -0.004583, 0.023750, -0.000417, 0.009167, -0.021250, 0.000417
#*# 	  -0.050833, -0.037917, -0.006667, 0.011667, -0.016250, -0.002500, -0.034583, -0.011667
#*# 	  -0.048750, -0.039583, -0.014167, 0.010417, -0.021250, -0.019167, -0.051667, -0.028333
#*# 	  -0.047500, -0.037500, -0.003750, 0.018333, -0.016667, -0.005000, -0.042083, -0.010417
#*# 	  -0.041667, -0.033333, -0.000417, 0.023333, -0.004167, 0.003333, -0.028750, -0.001250
#*# 	  0.004583, 0.012083, 0.041667, 0.051250, 0.021667, 0.028333, -0.010000, 0.014167
#*# 	  0.037083, 0.044167, 0.071250, 0.089583, 0.064167, 0.064167, 0.030417, 0.049583
#*# tension = 0.2
#*# min_x = 9.0
#*# algo = bicubic
#*# y_count = 8
#*# mesh_y_pps = 2
#*# min_y = 16.0
#*# x_count = 8
#*# max_y = 194.99
#*# mesh_x_pps = 2
#*# max_x = 184.0
